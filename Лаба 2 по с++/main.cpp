#include <iostream>
#include <fstream>
#include <cstdlib>
#include <locale.h>
#include "header.h"


int main() {
	setlocale(LC_ALL, "rus");
	string line;//массив для получаемой строки из файла
	int a = -1;
	char b, c, q;
	double seconds;
	cout << "Перезаписать базу данных?(Да - 1, нет - другое): ";
	cin >> q;
	if (q == '1') {
		cout << "Введите количество строк, которое хотите сгенерировать в файле: ";
		cin >> a;
		while (!cin.good() || a <= 0) {//Цикл проверки на корректность ввода
			cout << "Некорректный ввод, повторите попытку: ";
			cin.clear();
			while (getchar() != '\n');
			cin >> a;
		}
		generator_2(a);//вызов функции для генерации
	}
	ifstream f("C:\\Users\\nikit\\OneDrive\\Рабочий стол\\База данных.txt");//открываем файл для чтения
	if (!f.is_open()) {//Проверка открытия файла
		cout << "Ошибка открытия файла открыть.";
		return 1;
	}
	ofstream f1("C://Users//nikit//OneDrive//Рабочий стол//Отсортированная база данных.txt");//Создаем/перезаписываем файл для отсортированных данных
	if (!f1.is_open()) {//Проверка открытия файла
		cout << "Ошибка создания файла для отсортированных данных.";
		return 1;
	}
	if (q != '1') {//Цикл подсчета количества строк в файле
		while (!f.eof()) {
			getline(f, line);
			a++;
		}
	}
	f.clear();
	f.seekg(0);//Устонавливаем коретку на начало файла
	while (getchar() != '\n');
	flowers *fl = new flowers[a];// выделение памяти
	for (int i = 0; i < a; i++) {//цикл для заполнения класса
		getline(f, line);
		fl[i].fill(line);//вызов метода для разделения строки на объекты класса
	}
	cout << "Какую сортировку выполнить(Сортировка выбором - 1, Пирамидальная сортировка - 2): ";
	cin >> b;
	while (b != '1' && b != '2') {//цикл проверки ввода 
		while(getchar() != '\n');
		cout << "Некорректный ввод, повторите попытку: ";
		cin >> b;
	}
	cout << "По возрастанию - 1, По убыванию - 2: ";
	cin >> c;
	while (c != '1' && c != '2') {//цикл проверки ввода 
		while (getchar() != '\n');
		cout << "Некорректный ввод, повторите попытку: ";
		cin >> c;
	}
	if (b == '1') {
		if (c == '2') {
			seconds = selectSort(fl, a, false);//вызов функции сортировки выбором с параметром для сортировки по убыванию
			cout << "Сортировка завершена." << endl;
		}
		else {
			seconds = selectSort(fl, a, true);//вызов функции сортировки выбором с параметром для сортировки по возрастанию
			cout << "Сортировка завершена." << endl;
		}
	}
	else if (b == '2') {
		if (c == '2') {
			seconds = heapSort(fl, a, false);//вызов функции сортировки пирамидой с параметром для сортировки по убыванию
			cout << "Сортировка завершена." << endl;
		}
		else {
			seconds = heapSort(fl, a, true);//вызов функции сортировки пирамидой с параметром для сортировки по возрастанию
			cout << "Сортировка завершена." << endl;
		}
	}
	for (int i = 0; i < a; i++) {//цикл записи отсортированных объектов в новый файл
		f1 << fl[i];
	}
	cout << "Время, затраченное на сортировку(в секундах): " << seconds << endl;
	delete[] fl;//Освобождаем память
	f.close();//Закрытие файла
	f1.close();//Закрытие файла
	return 0;
}